<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="InsertRoute" xml:space="preserve">
    <value>DECLARE @InsertedRows AS TABLE (Id int);

INSERT INTO [Pronto].[Route]
           ([RouteDate]
           ,[DriverID]
           ,[TruckId]
           ,[DepatureTime]
           ,[ArrivelTime]
           ,[DepartureMilage]
           ,[ArrivelMilage]
           ,[TotolCod]
           ,[CodDecrepency]
           ,[HotelInfo]
           ,[HotelReceipt]
           ,[BreakAStart]
           ,[BreakAEnd]
           ,[BreakBStart]
           ,[BreakBEnd]
           ,[LunchStart]
           ,[LunchEnd]
           ,[DinnerStart]
           ,[DinnerEnd]
           ,[DriverComments]) 
		    output inserted.RootNo into @InsertedRows
     VALUES
           (@RouteDate,
           @DriverID, 
           @TruckId, 
           @DepatureTime,
           @ArrivelTime, 
           @DepartureMilage, 
           @ArrivelMilage, 
           @TotolCod, 
           @CodDecrepency, 
           @HotelInfo, 
           @HotelReceipt, 
           @BreakAStart, 
           @BreakAEnd, 
           @BreakBStart, 
           @BreakBEnd, 
           @LunchStart, 
           @LunchEnd, 
           @DinnerStart, 
           @DinnerEnd, 
           @DriverComments) 

		   select Id from @InsertedRows</value>
  </data>
  <data name="InsertStop" xml:space="preserve">
    <value>INSERT INTO [Pronto].[Stop]
           ([CustomerId]
           ,[ServiceId]
           ,[RouteId]
           ,[PtsId]
           ,[ClientName]
           ,[ClientAddr]
		   ,[ClientCity]
		   ,[ClientZipCode]
		   ,[ClientState]
           ,[ClientPh]
           ,[QbDocNo]
           ,[PadId]
           ,[PhoneId]
           ,[Eta]
           ,[StopCodAmount]
           ,[StopArrivalTime]
           ,[StopDepartTime]
           ,[StopMlgMeterRead]
		   ,[StopNote])
     VALUES
           (@CustomerId, 
           @ServiceId,
           @RouteId, 
           @PtsId, 
           @ClientName, 
           @ClientAddr,
		   @ClientCity,
		   @ClientZipCode,
		   @ClientState,
           @ClientPh, 
           @QbDocNo, 
           @PadId, 
           @PhoneId, 
           @Eta, 
           @StopCodAmount, 
           @StopArrivalTime, 
           @StopDepartTime, 
           @StopMlgMeterRead,
		   @StopNote)</value>
  </data>
  <data name="Search" xml:space="preserve">
    <value>;WITH DETAILS AS
(

SELECT R.RootNo As RouteNo
,R.RouteDate
,D.DriverName
,T.TruckId
,R.DepatureTime
,R.ArrivelTime
,R.DepartureMilage
,R.ArrivelMilage
,R.RouteMlg
,R.[TotolCod]
,R.[CodDecrepency]
,R.[HotelInfo]
,R.[HotelReceipt]
,R.[BreakAStart]
,R.[BreakAEnd]
,R.[BreakBStart]
,R.[BreakBEnd]
,R.[LunchStart]
,R.[LunchEnd]
,R.[DinnerStart]
,R.[DinnerEnd]
,R.DriverComments
,[Pronto].[GetHelpers](R.RootNo) AS HELPERS
,[Pronto].[GetCustomer](R.RootNo) AS Customers
,[Pronto].[GetServices](R.RootNo) AS Services
,[Pronto].[GetClients] (R.RootNo) AS ClientName
,[Pronto].[GetClientPh] (R.RootNo) AS ClientPh
,[Pronto].[GetPtsId] (R.RootNo) AS PtsId
,[Pronto].[GetClientZip] (R.RootNo) AS ClientZipCode
,[Pronto].[GetClientCity] (R.RootNo) AS ClientCity
FROM Pronto.Route R
JOIN PRONTO.Drivers D ON D.ID = R.DriverID
JOIN Pronto.Truck T ON T.ID = R.TruckId

WHERE R.RouteDate &gt; '{0}' AND R.RouteDate &lt; '{1}'
)

SELECT * FROM DETAILS</value>
  </data>
  <data name="SearchByRoot" xml:space="preserve">
    <value>;WITH DETAILS AS
(

SELECT R.RootNo As RouteNo
,R.RouteDate
,D.DriverName
,T.TruckId
,R.DepatureTime
,R.ArrivelTime
,R.DepartureMilage
,R.ArrivelMilage
,R.RouteMlg
,R.[TotolCod]
,R.[CodDecrepency]
,R.[HotelInfo]
,R.[HotelReceipt]
,R.[BreakAStart]
,R.[BreakAEnd]
,R.[BreakBStart]
,R.[BreakBEnd]
,R.[LunchStart]
,R.[LunchEnd]
,R.[DinnerStart]
,R.[DinnerEnd]
,R.DriverComments
,[Pronto].[GetHelpers](R.RootNo) AS HELPERS
,[Pronto].[GetCustomer](R.RootNo) AS Customers
,[Pronto].[GetServices](R.RootNo) AS Services
,[Pronto].[GetClients] (R.RootNo) AS ClientName
,[Pronto].[GetClientPH] (R.RootNo) AS ClientPH
,[Pronto].[GetPtsId] (R.RootNo) AS PtsId
FROM Pronto.Route R
JOIN PRONTO.Drivers D ON D.ID = R.DriverID
JOIN Pronto.Truck T ON T.ID = R.TruckId

WHERE R.RootNo = '{0}' 
)

SELECT * FROM DETAILS</value>
  </data>
  <data name="SelectDriver" xml:space="preserve">
    <value>SELECT 

D.ID
,D.DriverName
,T.ID
,T.TruckId
FROM Pronto.Route R
JOIN Pronto.Drivers D ON D.ID = R.DriverID
JOIN Pronto.Truck T ON T.ID = R.TruckId

WHERE R.RootNo ={0}</value>
  </data>
  <data name="SelectHelpers" xml:space="preserve">
    <value>SELECT 


HL.ID,HL.HelperName
FROM Pronto.Route R
JOIN Pronto.Drivers D ON D.ID = R.DriverID
JOIN Pronto.Truck T ON T.ID = R.TruckId
JOIN Pronto.RouteHelpers H ON R.RootNo = H.RouteId
JOIN Pronto.Helper HL ON HL.ID = H.HelperId

WHERE R.RootNo ={0}</value>
  </data>
  <data name="SelectRoot" xml:space="preserve">
    <value>SELECT R.RootNo
,R.RouteDate
,R.DepatureTime
,R.ArrivelTime
,R.DepartureMilage
,R.ArrivelMilage
,R.DepartureMilage
,R.ArrivelMilage
,R.RouteMlg
,R.TotolCod
,R.CodDecrepency
,R.HotelInfo
,R.HotelReceipt
,R.BreakAStart
,R.BreakAEnd
,R.BreakBStart
,R.BreakBEnd
,R.LunchStart
,R.LunchEnd
,R.DinnerStart
,R.DinnerEnd
,R.DriverComments
,D.ID
,D.DriverName
,T.ID
,T.TruckId
FROM Pronto.Route R
JOIN Pronto.Drivers D ON D.ID = R.DriverID
JOIN Pronto.Truck T ON T.ID = R.TruckId

WHERE R.RootNo ={0}</value>
  </data>
  <data name="SelectSingleStopCustomer" xml:space="preserve">
    <value>SELECT
C.ID
,C.CustomerName

FROM Pronto.Stop S
JOIN PRONTO.Customer C ON S.CustomerId = C.ID
JOIN Pronto.Service SV ON SV.ID = S.ServiceId
WHERE S.ID = {0}</value>
  </data>
  <data name="SelectSingleStopService" xml:space="preserve">
    <value>SELECT
SV.ID
,SV.ServiceType

FROM Pronto.Stop S
JOIN PRONTO.Customer C ON S.CustomerId = C.ID
JOIN Pronto.Service SV ON SV.ID = S.ServiceId
WHERE S.ID = {0}</value>
  </data>
  <data name="SelectStop" xml:space="preserve">
    <value>SELECT S.ID
,S.PtsId
,S.ClientName
,S.ClientAddr
,S.[ClientCity]
,S.[ClientZipCode]
,S.[ClientState]
,S.ClientPh
,S.QbDocNo
,S.PadId
,S.PhoneId
,S.Eta
,S.StopArrivalTime
,S.StopDepartTime
,S.StopMlgMeterRead
,S.[StopNote]
FROM Pronto.Stop S
JOIN Pronto.Route R ON S.RouteId = R.RootNo
JOIN PRONTO.Customer C ON S.CustomerId = C.ID
JOIN Pronto.Service SV ON SV.ID = S.ServiceId

WHERE R.RootNo ={0}</value>
  </data>
  <data name="UpdateRoot" xml:space="preserve">
    <value>DECLARE @InsertedRows AS TABLE (Id int);

UPDATE [Pronto].[Route]
          SET [RouteDate] = @RouteDate
           ,[DriverID] = @DriverID
           ,[TruckId] = @TruckId
           ,[DepatureTime] = @DepatureTime
           ,[ArrivelTime] = @ArrivelTime
           ,[DepartureMilage] = @DepartureMilage
           ,[ArrivelMilage] = @ArrivelMilage
           ,[TotolCod] =@TotolCod
           ,[CodDecrepency] =@CodDecrepency
           ,[HotelInfo] =@HotelInfo
           ,[HotelReceipt] =@HotelReceipt
           ,[BreakAStart] =@BreakAStart
           ,[BreakAEnd] =@BreakAEnd
           ,[BreakBStart] =@BreakBStart
           ,[BreakBEnd] =@BreakBEnd
           ,[LunchStart] =@LunchStart
           ,[LunchEnd] =@LunchEnd
           ,[DinnerStart] =@DinnerStart
           ,[DinnerEnd] =@DinnerEnd
           ,[DriverComments] = @DriverComments
		   output inserted.RootNo into @InsertedRows
		   WHERE RootNo = @RootNo

		    
    

		   select Id from @InsertedRows</value>
  </data>
</root>